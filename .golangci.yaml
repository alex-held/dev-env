# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
    # default concurrency is a available CPU number
    concurrency: 4

    # timeout for analysis, e.g. 30s, 5m, default is 1m
    timeout: 5m

    # exit code when at least one issue was found, default is 1
    issues-exit-code: 1

    # include test files or not, default is true
    tests: true

    # list of build tags, all linters use it. Default is empty list.
    build-tags:
        - codeanalysis

    # which dirs to skip: issues from them won't be reported;
    # can use regexp here: generated.*, regexp is applied on full path;
    # default value is empty list, but default dirs are skipped independently
    # from this option's value (see skip-dirs-use-default).
    # "/" will be replaced by current OS file path separator to properly work
    # on Windows.
    skip-dirs:
        - testdata/
        - docs/

    # default is true. Enables skipping of directories:
    #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
    skip-dirs-use-default: true

    # which files to skip: they will be analyzed, but issues from them
    # won't be reported. Default value is empty list, but there is
    # no need to include all autogenerated files, we confidently recognize
    # autogenerated files. If it's not please let us know.
    # "/" will be replaced by current OS file path separator to properly work
    # on Windows.
    #skip-files:
    #    - ".*\\.my\\.go$"
    #    - lib/bad.go

    # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
    # If invoked with -mod=readonly, the go command is disallowed from the implicit
    # automatic updating of go.mod described above. Instead, it fails when any changes
    # to go.mod are needed. This setting is most useful to check that go.mod does
    # not need updates, such as in a continuous integration and testing system.
    # If invoked with -mod=vendor, the go command assumes that the vendor
    # directory holds the correct copies of dependencies and ignores
    # the dependency descriptions in go.mod.
    # modules-download-mode:

    # Allow multiple parallel golangci-lint instances running.
    # If false (default) - golangci-lint acquires file lock on start.
    allow-parallel-runners: false


# output configuration options
output:
    # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
    format: colored-line-number

    # print lines of code with issue, default is true
    print-issued-lines: true

    # print linter name in the end of issue text, default is true
    print-linter-name: true

    # make issues output unique by line, default is true
    uniq-by-line: true

    # add a prefix to the output file references; default is no prefix
    path-prefix: ""

    # sorts results by: filepath, line and column
    sort-results: false


linters-settings:
    depguard:
        list-type: blacklist
        packages:
            # logging is allowed only by logutils.Log, logrus
            # is allowed to use only in logutils package
            - github.com/sirupsen/logrus
        packages-with-error-message:
            -   github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"
    dupl:
        threshold: 100
    funlen:
        lines: 100
        statements: 50
    gci:
        local-prefixes: github.com/golangci/golangci-lint
    goconst:
        min-len: 2
        min-occurrences: 2
    gocritic:
        enabled-tags:
            - diagnostic
            - experimental
            - opinionated
            - performance
            - style
        disabled-checks:
            - dupImport # https://github.com/go-critic/go-critic/issues/845
            - ifElseChain
            - octalLiteral
            - whyNoLint
            - wrapperFunc
    gocyclo:
        min-complexity: 15
    goimports:
        local-prefixes: github.com/golangci/golangci-lint
    golint:
        min-confidence: 0
    gomnd:
        settings:
            mnd:
                # don't include the "operation" and "assign"
                checks: argument,case,condition,return
    govet:
        check-shadowing: true
        settings:
            printf:
                funcs:
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    lll:
        line-length: 140
    maligned:
        suggest-new: true
    misspell:
        locale: US
    nolintlint:
        allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
        allow-unused: false # report any unused nolint directives
        require-explanation: false # don't require an explanation for nolint directives
        require-specific: false # don't require nolint directives to be specific about which linter is being skipped
linters:
    # please, do not use `enable-all`: it's deprecated and will be removed soon.
    # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
    disable-all: true
    enable:
        - bodyclose
        - deadcode
        - depguard
        - dogsled
        - dupl
        - errcheck
        - exhaustive
        - funlen
        - gochecknoinits
        - goconst
        - gocritic
        - gocyclo
        - gofmt
        - goimports
        - golint
        - gomnd
        - goprintffuncname
        - gosec
        - gosimple
        - govet
        - ineffassign
        - interfacer
        - lll
        - misspell
        - nakedret
        - noctx
        - nolintlint
        - rowserrcheck
        #- scopelint
        - staticcheck
        - structcheck
        - stylecheck
        - typecheck
        - unconvert
        - unparam
        - unused
        - varcheck
        - whitespace
        # don't enable:
        # - asciicheck
        # - gochecknoglobals
        # - gocognit
        # - godot
        # - godox
        # - goerr113
        # - maligned
        # - nestif
        # - prealloc
        # - testpackage
        # - wsl

    #severity:
    # Default value is empty string.
    # Set the default severity for issues. If severity rules are defined and the issues
    # do not match or no severity is provided to the rule this will be the default
    # severity applied. Severities should match the supported severity names of the
    # selected out format.
    # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
    # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
    # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
    # default-severity:

    # The default value is false.
    # If set to true severity-rules regular expressions become case sensitive.
    # case-sensitive: false

    # Default value is empty list.
    # When a list of severity rules are provided, severity information will be added to lint
    # issues. Severity rules have the same filtering capability as exclude rules except you
    # are allowed to specify one matcher per severity rule.
    # Only affects out formats that support setting severity information.
    #rules:
    #    -   linters:
    #            - dupl
    #        severity: info
