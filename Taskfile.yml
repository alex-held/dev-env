# https://taskfile.dev

version: '3'
output: prefixed

vars:
  BIN_DIR: '{{.PWD}}/build/bin'
  PROJECT: devctl
  VERSION: v0.8
  GIT_COMMIT:
    sh: git log -n 1 --format=%h

tasks:

  tidy:
    desc: Tidies go.mod and go.sum
    summary: |
      Cleans up dependencies inside go.mod and go.sum.
      Make sure no unnecessary dependecies are present
    cmds:
      - go mod tidy -v
      - git diff-index --quiet HEAD

  install-deps:
    desc: Installs all required tooling and dependencies
    cmds:
      - go mod download
      - go get -u
      - go install github.com/spf13/cobra/cobra
      - ./build/install-tools.sh -b {{.BIN_DIR}}

  install:
    desc: Installs {{.PROJECT}} into GOBIN
    cmds:
      - task: build
      - cp {{.PROJECT}} {{.GOPATH}}/bin/{{.PROJECT}}

  run:
    desc: Runs {{.PROJECT}}
    cmds:
      - task: build
      - ./{{.PROJECT}} {{.ARGS}}
    env:
      ARGS:

  build:
    desc: Builds {{.PROJECT}}
    cmds:
      - go build -ldflags="-X 'cmd.Version={{.VERSION}}'" -v -o out/{{.PROJECT}}

  test:cover:
    desc: Tests & Covers {{.PROJECT}}
    summary: |
      Tests & Covers {{.PROJECT}}

      It will test your project and collects the coverage.
      The coverage gets saved to out/coverage.out
    cmds:
      - go test -v ./...

  test-quiet:
    desc: Tests {{.PROJECT}} quietly
    cmds:
      - go test --short ./...
  
  cover:
    desc: Tests & Covers {{.PROJECT}}
    summary: |
      Tests & Covers {{.PROJECT}}
      
      It will test your project and collects the coverage.
      The coverage gets saved to out/coverage.out
    cmds:
      - go test -v -cover  -coverprofile=out/coverage.out  ./...  > out/test-report.out

  lint:
    desc: Lints & Fixes {{.PROJECT}}
    cmds:
      - "{{.BIN_DIR}}/golangci-lint -v --color=always run ./...  --fix"

  lint:silently:
    desc: Lints & Fixes {{.PROJECT}}
    cmds:
      - "{{.BIN_DIR}}/golangci-lint run ./... --fix"

  lint:tool:
    desc: Lints & Fixes inside a given file {{.PROJECT}}
    vars:
      FILE:
    cmds:
      - "{{.BIN_DIR}}/golangci-lint run --color=always {{.FILE}} --fix > out/lint || (cat out/lint && rm out/lint) && rm out/lint"

  clean:
    desc: Cleans temp files and folders
    cmds:
      - rm -rf out/
      - rm $(find build/bin -type l -name "[a-z]*")
