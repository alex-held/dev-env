#!/usr/bin/env bash

set -e

# --------------------------------------------------
# DEVCTL Constants
# --------------------------------------------------
export DEVCTL_ENV_EXEC="devctlenv"
export DEVCTL_SHIM_ROOT="$DEVCTL_ROOT/shims"
export DEVCTL_HOOK_DIRNAME="devctl_hooks.d"


if [ "--debug" == "$1"  ]; then
  export DEVCTL_DEBUG=1
  shift
fi


export DEVCTL_DEBUG=1
if [ -n "$DEVCTL_DEBUG" ]; then
  # https://wiki-dev.bash-hackers.org/scripting/debuggingtips#making_xtrace_more_useful
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  echo  $PS4
  set -x
fi

abort() {
  { if [ "$#" -eq 0 ]; then cat -
    else echo "$DEVCTL_ENV_EXEC: $*"
    fi
  } >&2
  exit 1
}

if enable -f "${BASH_SOURCE%/*}"/../libexec/$DEVCTL_ENV_EXEC.dylib src 2>/dev/null; then
  abs_dirname() {
    local path
    path="$(src "$1")"
    echo "${path%/*}"
  }
else
  [ -z "$DEVCTL_NATIVE_EXT" ] || abort "failed to load \`realpath' builtin"

  READLINK=$(type -p greadlink readlink | head -1)
  [ -n "$READLINK" ] || abort "cannot find readlink - are you missing GNU coreutils?"

  resolve_link() {
    $READLINK "$1"
  }

  abs_dirname() {
    local path="$1"

    # Use a subshell to avoid changing the current path
    (
    while [ -n "$path" ]; do
      cd_path="${path%/*}"
      if [[ "$cd_path" != "$path" ]]; then
        cd "$cd_path"
      fi
      name="${path##*/}"
      path="$(resolve_link "$name" || true)"
    done

    echo "$PWD"
    )
  }
fi

if [ -z "${DEVCTL_ROOT}" ]; then
  DEVCTL_ROOT="${HOME}/.devctl"
else
  DEVCTL_ROOT="${DEVCTL_ROOT%/}"
fi
export DEVCTL_ROOT

if [ -z "${PYENV_DIR}" ]; then
  PYENV_DIR="$PWD"
fi

if [ ! -d "$PYENV_DIR" ] || [ ! -e "$PYENV_DIR" ]; then
  abort "cannot change working directory to \`$PYENV_DIR'"
fi

PYENV_DIR=$(cd "$PYENV_DIR" && echo "$PWD")
export PYENV_DIR


shopt -s nullglob

bin_path="$(abs_dirname "$0")"
for plugin_bin in "${bin_path%/*}"/plugins/*/bin; do
  PATH="${plugin_bin}:${PATH}"
done
for plugin_bin in "${DEVCTL_ROOT}"/plugins/*/bin; do
  PATH="${plugin_bin}:${PATH}"
done
export PATH="${bin_path}:${PATH}"



DEVCTL_HOOK_PATH="${DEVCTL_HOOK_PATH}:${DEVCTL_ROOT}/${DEVCTL_HOOK_DIRNAME}"
if [ "${bin_path%/*}" != "$DEVCTL_ROOT" ]; then
  # Add devctl_hooks's own `devctl_hooks.d` unless devctl was cloned to DEVCTL_ROOT
  DEVCTL_HOOK_PATH="${DEVCTL_HOOK_PATH}:${bin_path%/*}/${DEVCTL_HOOK_DIRNAME}"
fi

DEVCTL_HOOK_PATH"${DEVCTL_HOOK_PATH}:/usr/local/etc/${DEVCTL_HOOK_DIRNAME}:/etc/${DEVCTL_HOOK_DIRNAME}:/usr/lib/devctl/hooks"
for plugin_hook in "${DEVCTL_ROOT}/plugins/"*/etc/"${DEVCTL_HOOK_DIRNAME}"; do
  DEVCTL_HOOK_PATH="${DEVCTL_HOOK_PATH}:${plugin_hook}"
done
DEVCTL_HOOK_PATH="${DEVCTL_HOOK_PATH#:}"
export DEVCTL_HOOK_PATH

shopt -u nullglob

command="$1"
case "$command" in
"" )
  { "${DEVCTL_ENV_EXEC}---version"
    # devctlenv---version

    "${DEVCTL_ENV_EXEC}-help"
    # devctlenv-help
  } | abort
  ;;
-v | --version )
  exec "${DEVCTL_ENV_EXEC}---version"
  # exec devctlenv---version

  ;;
-h | --help )
  exec "${DEVCTL_ENV_EXEC}-help"
  # exec devctlenv-help

  ;;
* )
  command_path="$(command -v "${DEVCTL_ENV_EXEC}-$command" || true)"
  if [ -z "$command_path" ]; then
    if [ "$command" == "shell" ]; then
      abort "shell integration not enabled. Run \`${DEVCTL_ENV_EXEC} init' for instructions."
    else
      abort "no such command \`$command'"
    fi
  fi

  shift 1
  if [ "$1" = --help ]; then
    if [[ "$command" == "sh-"* ]]; then
      echo "${DEVCTL_ENV_EXEC} help \"$command\""
    # echo devctlenv help \"$command\""

    else
      exec "${DEVCTL_ENV_EXEC}-help" "$command"
    # exec devctlenv-help "$command"
    fi
  else
    exec "$command_path" "$@"
  fi
  ;;
esac
