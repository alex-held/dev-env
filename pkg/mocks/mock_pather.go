// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alex-held/devctl/pkg/devctlpath (interfaces: Pather)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPather is a mock of Pather interface.
type MockPather struct {
	ctrl     *gomock.Controller
	recorder *MockPatherMockRecorder
}

// MockPatherMockRecorder is the mock recorder for MockPather.
type MockPatherMockRecorder struct {
	mock *MockPather
}

// NewMockPather creates a new mock instance.
func NewMockPather(ctrl *gomock.Controller) *MockPather {
	mock := &MockPather{ctrl: ctrl}
	mock.recorder = &MockPatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPather) EXPECT() *MockPatherMockRecorder {
	return m.recorder
}

// Bin mocks base method.
func (m *MockPather) Bin(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bin", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Bin indicates an expected call of Bin.
func (mr *MockPatherMockRecorder) Bin(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bin", reflect.TypeOf((*MockPather)(nil).Bin), arg0...)
}

// Cache mocks base method.
func (m *MockPather) Cache(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cache", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockPatherMockRecorder) Cache(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockPather)(nil).Cache), arg0...)
}

// Config mocks base method.
func (m *MockPather) Config(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Config", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockPatherMockRecorder) Config(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockPather)(nil).Config), arg0...)
}

// ConfigFilePath mocks base method.
func (m *MockPather) ConfigFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigFilePath indicates an expected call of ConfigFilePath.
func (mr *MockPatherMockRecorder) ConfigFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFilePath", reflect.TypeOf((*MockPather)(nil).ConfigFilePath))
}

// ConfigRoot mocks base method.
func (m *MockPather) ConfigRoot(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigRoot", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigRoot indicates an expected call of ConfigRoot.
func (mr *MockPatherMockRecorder) ConfigRoot(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRoot", reflect.TypeOf((*MockPather)(nil).ConfigRoot), arg0...)
}

// Download mocks base method.
func (m *MockPather) Download(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockPatherMockRecorder) Download(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockPather)(nil).Download), arg0...)
}

// SDK mocks base method.
func (m *MockPather) SDK(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDK", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// SDK indicates an expected call of SDK.
func (mr *MockPatherMockRecorder) SDK(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDK", reflect.TypeOf((*MockPather)(nil).SDK), arg0...)
}
